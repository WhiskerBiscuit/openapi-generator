import fs from 'fs';
import path from 'path';
import { Response, NextFunction } from 'express';
import { HttpError, OpenApiRequest, OpenApiRequestMetadata, OpenAPIV3 } from 'express-openapi-validator/dist/framework/types';
import camelCase from 'camelcase';
import config from '../config';
import logger from '../logger';

// TODO: put in module for sharing
interface OpenAPIV3OperationObject extends OpenAPIV3.OperationObject {
    [index:string]: any;
}

class Controller {
    static sendResponse(response: Response, payload: any) {
        /**
         * The default response-code is 200. We want to allow to change that. in That case,
         * payload will be an object consisting of a code and a payload. If not customized
         * send 200 and the payload as received in this method.
         */
        response.status(payload.code || 200);
        const responsePayload = payload.payload !== undefined ? payload.payload : payload;
        if (responsePayload instanceof Object) {
            response.json(responsePayload);
        } else {
            response.end(responsePayload);
        }
    }

    static sendError(response: Response, error: HttpError) {
        logger.error(error);

        response.status(error.status || 500);
        if (error.errors instanceof Object) {
            response.json(error.errors);
        } else {
            response.end(error.errors || error.message);
        }
    }

    /**
     * Files have been uploaded to the directory defined by config.js as upload directory
     * Files have a temporary name, that was saved as 'filename' of the file object that is
     * referenced in reuquest.files array.
     * This method finds the file and changes it to the file name that was originally called
     * when it was uploaded. To prevent files from being overwritten, a timestamp is added between
     * the filename and its extension
     * @param request
     * @param fieldName
     * @returns {string}
     */
    // static collectFile(request: OpenApiRequest, fieldName: string) {
    //     let uploadedFileName = '';
    //     if (request.files && request.files.length > 0) {
    //         const fileObject = request.files.find(file => file.fieldname === fieldName);
    //         if (fileObject) {
    //             const fileArray = fileObject.originalname.split('.');
    //             const extension = fileArray.pop();
    //             fileArray.push(`_${Date.now()}`);
    //             uploadedFileName = `${fileArray.join('')}.${extension}`;
    //             fs.renameSync(path.join(config.FILE_UPLOAD_PATH, fileObject.filename),
    //                 path.join(config.FILE_UPLOAD_PATH, uploadedFileName));
    //         }
    //     }
    //     return uploadedFileName;
    // }

    static getRequestBodyName(request: OpenApiRequest) {
        const { schema }: { schema: OpenAPIV3OperationObject } = (request.openapi as OpenApiRequestMetadata);
        const codeGenDefinedBodyName = schema['x-codegen-request-body-name'];
        if (codeGenDefinedBodyName !== undefined) {
          return codeGenDefinedBodyName;
        }

        const { content } = schema.requestBody as OpenAPIV3.RequestBodyObject;
        const { $ref } = content['application/json'].schema as OpenAPIV3.ReferenceObject;
        if ($ref !== undefined && $ref.length > 0) {
            return ($ref.substr($ref.lastIndexOf('/') + 1));
        }
        return 'body';
    }

    static collectRequestParams(request: OpenApiRequest): object {
        const requestParams: any = {};
        if (request.openapi !== undefined
            && (request.openapi as OpenApiRequestMetadata).schema !== undefined
        ) {
            const { schema }: { schema: OpenAPIV3OperationObject } = (request.openapi as OpenApiRequestMetadata);
            if (schema.requestBody !== undefined) {
                const { content } = schema.requestBody as OpenAPIV3.RequestBodyObject;
                if (content['application/json'] !== undefined) {
                    const requestBodyName = camelCase(this.getRequestBodyName(request));
                    requestParams[requestBodyName] = request.body;
                }
                // else if (content['multipart/form-data'] !== undefined) {
                //     Object.keys(content['multipart/form-data'].schema.properties).forEach(
                //         (property) => {
                //             const propertyObject = content['multipart/form-data'].schema.properties[property];
                //             if (propertyObject.format !== undefined && propertyObject.format === 'binary') {
                //                 requestParams[property] = this.collectFile(request, property);
                //             } else {
                //                 requestParams[property] = request.body[property];
                //             }
                //         },
                //     );
                // }
            }

            schema.parameters.forEach((param: OpenAPIV3.ParameterObject) => {
                if (param.in === 'path') {
                    requestParams[param.name] = (request.openapi as OpenApiRequestMetadata).pathParams[param.name];
                } else if (param.in === 'query') {
                    requestParams[param.name] = request.query[param.name];
                } else if (param.in === 'header') {
                    requestParams[param.name] = request.headers[param.name];
                }
            });
        }

        return requestParams;
    }

    static async handleRequest(request: OpenApiRequest, response: Response, serviceOperation: any) {
        const requestParams = this.collectRequestParams(request);
        try {
            const serviceResponse = await serviceOperation(requestParams);
            Controller.sendResponse(response, serviceResponse);
        }
        catch (error) {
            const err: HttpError = {
                status: 500,
                message: `Controller: Request handler error with params: ${requestParams}`,
                name: 'ControllerError',
                errors: [
                    {
                        path: request.path,
                        message: `Controller: Request handler error with params: ${requestParams}`,
                        error_code: '500',
                    },
                ],
            };
            Controller.sendError(response, err);
        }
    }
}

export default Controller;
