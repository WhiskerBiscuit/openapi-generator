import http from 'http';
import https from 'https';
import fs from 'fs';
import fsPath from 'path';
import swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import { OpenApiValidator } from 'express-openapi-validator';
import { HttpError, OpenApiRequest, OpenAPIV3 } from 'express-openapi-validator/dist/framework/types';
import debug from 'debug';
import morgan from 'morgan';
import logger from './logger';
import config from './config';
import openApiRouter from './routers/openApiRouter';

debug('{{projectName}}:server');

interface PathItemObject extends OpenAPIV3.PathItemObject {
    [index:string]: any;
}

class ExpressServer {
    port: number;
    app: express.Application;
    openApiPath: string;
    schema: OpenAPIV3.Document;
    server: http.Server;

    constructor(port: number, openApiYaml: string) {
        this.port = port;
        this.app = express();
        this.openApiPath = openApiYaml;
        const yamlString: string = fs.readFileSync(openApiYaml).toString();
        try {
            this.schema = jsYaml.safeLoad(yamlString) as OpenAPIV3.Document;
        } catch (e) {
            logger.error('Server: Failed to start Express Server', e.message);
        }
        this.setupMiddleware();
    }

    setupMiddleware() {
        this.app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));
        this.app.use(cors());
        this.app.use(bodyParser.json({ limit: '14MB' }));
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: false }));
        this.app.use(cookieParser());

        // Serve up static files from the specified folder
        this.app.use(express.static('public'));

        // Inject OpenAPI MetaData
        this.app.use((req: Request, res: Response, next: NextFunction) => {
            const {
                path,
                method,
            } = req;
            const openApiMethod: string = method.toLowerCase();
            const openApiPath: PathItemObject = this.schema.paths[path];
            const openApiOperation: OpenAPIV3.OperationObject = openApiPath && openApiPath[openApiMethod];

            if (openApiOperation) {
                req.openapi = { schema: openApiOperation };
            }
            next();
        });

        // Simple test to see that the server is up and responding
        this.app.get('/health(check)?', (req: Request, res: Response) => res.send({ status: 'ok' }));

        // Send the openapi document *AS GENERATED BY THE GENERATOR*
        this.app.get('/openapi', (req: Request, res: Response) => res.sendFile((fsPath.join(__dirname, 'api', 'openapi.yaml'))));

        // View the openapi document in a visual interface. Should be able to test from this page
        this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema as object));

        this.app.use(openApiRouter());
    }

    async launch() {
        await new OpenApiValidator({
            apiSpec: this.openApiPath,
            operationHandlers: fsPath.join(__dirname),
            fileUploader: { dest: config.FILE_UPLOAD_PATH },
        }).install(this.app)
            .catch(e => logger.error(e))
            .then(() => {
                // Register global error handler
                this.app.use((err: HttpError, req: Request, res: Response, next: NextFunction) => {
                    // Log global server error
                    logger.error(`Server: Server error: `, err);

                    // Respond with global error
                    res.status(err.status || 500).json({
                        message: err.message || err,
                        errors: err.errors,
                    });
                });

                // Create standard/secure server instance
                this.server = process.env.NODE_ENV === 'production' ?
                    https.createServer(this.app) :
                    http.createServer(this.app);

                // Set server port
                this.server.listen(this.port);

                // Log server status
                logger.info(`Server: Listening on port ${this.port}`);
            });
    }

    async close(): Promise<void> {
        if (this.server !== undefined) {
            // Perform any shutdown procedures
            await this.server.close();

            // Log server status
            logger.info(`Server: Server on port ${this.port} shut down`);
        }
    }
}

export default ExpressServer;
